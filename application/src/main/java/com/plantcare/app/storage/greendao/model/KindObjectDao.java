package com.plantcare.app.storage.greendao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table KIND_OBJECT.
 */
public class KindObjectDao extends AbstractDao<KindObject, Long> {

    public static final String TABLENAME = "KIND_OBJECT";

    /**
     * Properties of entity KindObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Latin_name = new Property(2, String.class, "latin_name", false, "LATIN_NAME");
        public final static Property Watering_season = new Property(3, String.class, "watering_season", false, "WATERING_SEASON");
        public final static Property Watering_rest = new Property(4, String.class, "watering_rest", false, "WATERING_REST");
        public final static Property Dry_between_watering_season = new Property(5, Boolean.class, "dry_between_watering_season", false, "DRY_BETWEEN_WATERING_SEASON");
        public final static Property Dry_between_watering_rest = new Property(6, Boolean.class, "dry_between_watering_rest", false, "DRY_BETWEEN_WATERING_REST");
        public final static Property Insolation = new Property(7, String.class, "insolation", false, "INSOLATION");
        public final static Property Season_temp_min = new Property(8, Integer.class, "season_temp_min", false, "SEASON_TEMP_MIN");
        public final static Property Season_temp_max = new Property(9, Integer.class, "season_temp_max", false, "SEASON_TEMP_MAX");
        public final static Property Rest_temp_min = new Property(10, Integer.class, "rest_temp_min", false, "REST_TEMP_MIN");
        public final static Property Rest_temp_max = new Property(11, Integer.class, "rest_temp_max", false, "REST_TEMP_MAX");
        public final static Property Humidity = new Property(12, String.class, "humidity", false, "HUMIDITY");
        public final static Property Comment = new Property(13, String.class, "comment", false, "COMMENT");
    }

    ;

    private DaoSession daoSession;


    public KindObjectDao(DaoConfig config) {
        super(config);
    }

    public KindObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'KIND_OBJECT' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'LATIN_NAME' TEXT," + // 2: latin_name
                "'WATERING_SEASON' TEXT," + // 3: watering_season
                "'WATERING_REST' TEXT," + // 4: watering_rest
                "'DRY_BETWEEN_WATERING_SEASON' INTEGER," + // 5: dry_between_watering_season
                "'DRY_BETWEEN_WATERING_REST' INTEGER," + // 6: dry_between_watering_rest
                "'INSOLATION' TEXT," + // 7: insolation
                "'SEASON_TEMP_MIN' INTEGER," + // 8: season_temp_min
                "'SEASON_TEMP_MAX' INTEGER," + // 9: season_temp_max
                "'REST_TEMP_MIN' INTEGER," + // 10: rest_temp_min
                "'REST_TEMP_MAX' INTEGER," + // 11: rest_temp_max
                "'HUMIDITY' TEXT," + // 12: humidity
                "'COMMENT' TEXT);"); // 13: comment
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_KIND_OBJECT_ID ON KIND_OBJECT" +
                " (ID);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KIND_OBJECT'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, KindObject entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String latin_name = entity.getLatin_name();
        if (latin_name != null) {
            stmt.bindString(3, latin_name);
        }

        String watering_season = entity.getWatering_season();
        if (watering_season != null) {
            stmt.bindString(4, watering_season);
        }

        String watering_rest = entity.getWatering_rest();
        if (watering_rest != null) {
            stmt.bindString(5, watering_rest);
        }

        Boolean dry_between_watering_season = entity.getDry_between_watering_season();
        if (dry_between_watering_season != null) {
            stmt.bindLong(6, dry_between_watering_season ? 1l : 0l);
        }

        Boolean dry_between_watering_rest = entity.getDry_between_watering_rest();
        if (dry_between_watering_rest != null) {
            stmt.bindLong(7, dry_between_watering_rest ? 1l : 0l);
        }

        String insolation = entity.getInsolation();
        if (insolation != null) {
            stmt.bindString(8, insolation);
        }

        Integer season_temp_min = entity.getSeason_temp_min();
        if (season_temp_min != null) {
            stmt.bindLong(9, season_temp_min);
        }

        Integer season_temp_max = entity.getSeason_temp_max();
        if (season_temp_max != null) {
            stmt.bindLong(10, season_temp_max);
        }

        Integer rest_temp_min = entity.getRest_temp_min();
        if (rest_temp_min != null) {
            stmt.bindLong(11, rest_temp_min);
        }

        Integer rest_temp_max = entity.getRest_temp_max();
        if (rest_temp_max != null) {
            stmt.bindLong(12, rest_temp_max);
        }

        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(13, humidity);
        }

        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(14, comment);
        }
    }

    @Override
    protected void attachEntity(KindObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public KindObject readEntity(Cursor cursor, int offset) {
        KindObject entity = new KindObject( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // latin_name
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // watering_season
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // watering_rest
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // dry_between_watering_season
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // dry_between_watering_rest
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // insolation
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // season_temp_min
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // season_temp_max
                cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // rest_temp_min
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // rest_temp_max
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // humidity
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // comment
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, KindObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatin_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWatering_season(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWatering_rest(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDry_between_watering_season(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDry_between_watering_rest(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setInsolation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSeason_temp_min(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSeason_temp_max(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRest_temp_min(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRest_temp_max(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setHumidity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setComment(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(KindObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(KindObject entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
